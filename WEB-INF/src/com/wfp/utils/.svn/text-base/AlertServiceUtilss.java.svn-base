package com.wfp.utils;

import java.util.Date;
import java.util.List;

import com.enterprisehorizons.db.util.HibernateUtils;
import com.enterprisehorizons.util.Logger;
import com.enterprisehorizons.util.SearchCriteria;
import com.spacetimeinsight.alerts.config.beans.AlertBean;
import com.spacetimeinsight.alerts.utils.AlertUtils;
import com.spacetimeinsight.db.config.alerts.model.AlertPriority;
import com.spacetimeinsight.db.model.util.DataModelsCache;
import com.spacetimeinsight.db.model.util.SecurityDBUtils;
import com.wfp.db.platform.model.AlertService;
import com.wfp.db.platform.model.MessageTemplate;
import com.wfp.db.util.PostgresSearchCriteriaDateFormatter;
import com.wfp.mail.Renderable;
import com.wfp.security.form.DeviceBean;
import com.wfp.security.form.LDAPUserBean;

public class AlertServiceUtils implements IEPICConstants {
 
	public static void publishAlert(String deviceId, String dangerZoneName,  Double lat, Double lng){
		com.wfp.db.platform.model.MessageTemplate mt = com.wfp.utils.RBRegionsUtils.getMessageTemplate(dangerZoneName);
		if(mt == null){
			return;
		}
		
		LDAPUserBean userBean = LDAPUtils.getLDAPUserBean(deviceId);
		//.LDAPUserBean userBean = LDAPUtils.cacheLDAPUserDtls(deviceId, null);
		String uid = null;
		if(userBean != null){
			uid = userBean.getUid(); //Mail();
			if(uid != null){
				try {
					long templateId = getTemplateId(dangerZoneName);
					Date date = new Date();
					boolean isDuplicate = validateAlert(templateId, uid, mt,   new Date());
					if(!isDuplicate){
						long refId = insertUpdateAlert(templateId, uid,  mt.getBody(), mt.getSubject(), date);
						if(refId > 0){
							String eventRefId = EventServiceUtils.publishEventService(userBean.getUid(), mt.getSubject(), mt.getBody());
							Logger.error("Event Successfully published to server ["+userBean.getUid()+"]["+eventRefId+"]",AlertServiceUtils.class.getName());
							insertEventRefId(refId, eventRefId);
							if(eventRefId != null){							
								processAlertMessage(mt.getBody(), "iPadAlert", mt.getSubject(), "0", lat, lng);
							}
						}
						
						//EMailUtils.getInstance().sendMail("sti@emergency.lu", mailId, null, mt.getBody()+" Event Reference:: ["+SecurityDBUtils.getEncryptedPassword(refId+"")+"]", mt.getSubject());
					}
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
	}
	
	public static void publishAlert(DeviceBean device, String dangerZoneName,  Double lat, Double lng){
		com.wfp.db.platform.model.MessageTemplate mt = com.wfp.utils.RBRegionsUtils.getMessageTemplate(dangerZoneName);
		if(mt == null){
			return;
		}
		
		//LDAPUserBean userBean = LDAPUtils.getLDAPUserBean(device.getName());
		//.LDAPUserBean userBean = LDAPUtils.cacheLDAPUserDtls(deviceId, null);
		String deviceId = null;
		//if(userBean != null){
			deviceId = device.getName();
			if(deviceId != null){
				try {
					long templateId = getTemplateId(dangerZoneName);
					Date date = new Date();
					boolean isDuplicate = validateAlert(templateId, deviceId, mt,   new Date());
					if(!isDuplicate){
						long refId = insertUpdateAlert(templateId, deviceId,  mt.getBody(), mt.getSubject(), date);
						if(refId > 0){
							String eventRefId = EventServiceUtils.publishEventService(deviceId, mt.getSubject(), mt.getBody());
							Logger.error("Event Successfully published to server ["+device.getUid()+"]["+eventRefId+"]",AlertServiceUtils.class.getName());
							insertEventRefId(refId, eventRefId);
							if(eventRefId != null){							
								processAlertMessage(mt.getBody(), "iPadAlert", mt.getSubject(), "0", lat, lng);
							}
						}
						
						//EMailUtils.getInstance().sendMail("sti@emergency.lu", mailId, null, mt.getBody()+" Event Reference:: ["+SecurityDBUtils.getEncryptedPassword(refId+"")+"]", mt.getSubject());
					}
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		//}
		
	}
	
	
	public static void publishAlertByUID(String uid, String dangerZoneName,  Double lat, Double lng){
		com.wfp.db.platform.model.MessageTemplate mt = com.wfp.utils.RBRegionsUtils.getMessageTemplate(dangerZoneName);
		if(mt == null){
			return;
		}
		
		//LDAPUserBean userBean = LDAPUtils.getLDAPUserBean(deviceId);
		//.LDAPUserBean userBean = LDAPUtils.cacheLDAPUserDtls(deviceId, null);
		String mailId = uid;
		//if(userBean != null){
			//mailId = userBean.getMail();
			//if(mailId != null){
				try {
					long templateId = mt.getId();
					Date date = new Date();
					boolean isDuplicate = validateAlert(templateId, mailId, mt,   new Date());
					if(!isDuplicate){
						long refId = insertUpdateAlert(templateId, mailId,  mt.getBody(), mt.getSubject(), date);
						if(refId > 0){
							String eventRefId = EventServiceUtils.publishEventService("avelala", mt.getSubject(), mt.getBody());
							Logger.error("Event Successfully published to server ["+uid+"]["+eventRefId+"]",AlertServiceUtils.class.getName());
							insertEventRefId(refId, eventRefId);
							if(eventRefId != null){							
								processAlertMessage(mt.getBody(), "iPadAlert", mt.getSubject(), "0", lat, lng);
							}
						}
						
						//EMailUtils.getInstance().sendMail("sti@emergency.lu", mailId, null, mt.getBody()+" Event Reference:: ["+SecurityDBUtils.getEncryptedPassword(refId+"")+"]", mt.getSubject());
					}
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			//}
		//}
		
	}
	
	
	
	
	/**
	 * This method to allow to display message in ticker panel from given parameters.
	 * @param message It is message information to display in Ticker.
	 * @param alertName It is name of Default alert.
	 * @param desc it is description of default alert.
	 * @param alertSourceType It is alert source type used for default alert.
	 */
	public static void processAlertMessage(String message,String alertName,String desc,String alertSourceType, Double lat, Double lng){
		HibernateUtils.getSessionFactory().getCurrentSession().beginTransaction();
		String hql="from AlertPriority ap,AlertMaster am where am.id = ap.alertId and am.name='"+alertName+"'";
		org.hibernate.Query query = HibernateUtils.getSessionFactory().getCurrentSession().createQuery(hql);
		List<Object[]> results =query.list();
//		System.out.println(results.size());
		HibernateUtils.getSessionFactory().getCurrentSession().getTransaction().rollback();
		if(results!=null && results.size()>0){
		for (int i=0;i<results.size();i++) {
			Object[] objects = results.get(i);
			if(objects!=null && objects.length>0){
				if(objects[0] instanceof AlertPriority){
				AlertPriority alertPriority = (AlertPriority)objects[0];
				Long priorityId= alertPriority.getId();
				Long alertId= alertPriority.getAlertId();
				AlertUtils.processAlertMessage(null, alertId, priorityId, message,desc, new Date().toString(), alertSourceType, null, null, null, null, null, null, lat, lng);
				}
			}
		}
		}

	}
	
	/**
	 * The method returns the alert id for a given alert name.
	 * 
	 * @param alertName The alert name for which the id needs to be returned.
	 * @return It returns the alert id for for a given alert name.
	 */
	public static Long getAlertId(String alertName){
		List<AlertBean> allAlerts = AlertUtils.getAllDefinedAlerts();
		for(int i=0; i < allAlerts.size(); i++){
			if(allAlerts.get(i).getName().equalsIgnoreCase(alertName)){
				return allAlerts.get(i).getId();
			}
		}
		return null;
	}
	

	private static boolean validateAlert(long templateId, String mailId, MessageTemplate mt, Date date) {
		// TODO Auto-generated method stub
		AlertService alertService = new AlertService();
		SearchCriteria criteria = new SearchCriteria();
		criteria.setSearchCriteriaFormatter(new PostgresSearchCriteriaDateFormatter());
		criteria.addCritirea(PROPERTY_TEMPLATE_ID, SearchCriteria.EQUALS, templateId);
		criteria.addCritirea(PROPERTY_MSG_TO, SearchCriteria.EQUALS, mailId);
		criteria.addCritirea(PROPERTY_SEND_ON, SearchCriteria.EQUALS, date);
		
		List list  = alertService.searchData(criteria);
		if(list != null && list.size()> 0){
			return true;
		}
		date.setHours(0);
		date.setMinutes(0);
		date.setSeconds(0);
		criteria.clearAll();
		criteria.addCritirea(PROPERTY_SEND_ON, SearchCriteria.GREATER_THAN_EQUALS, date);
		criteria.addCritirea(PROPERTY_TEMPLATE_ID, SearchCriteria.EQUALS, templateId);
		criteria.addCritirea(PROPERTY_MSG_TO, SearchCriteria.EQUALS, mailId);
		
		List msgperDayFilterList  = alertService.searchData(criteria);
		if(msgperDayFilterList != null && msgperDayFilterList.size()> 0 && ((mt.getRecurPerDay()!= null &&  mt.getRecurPerDay().intValue() != 0) && mt.getRecurPerDay() < msgperDayFilterList.size())){
			return true;
		}
		
		return false;
	}
	
	public static AlertService isValidAlert(long id) {
		// TODO Auto-generated method stub
		AlertService alertService = new AlertService();
		SearchCriteria criteria = new SearchCriteria();
		
		criteria.addCritirea("id", SearchCriteria.EQUALS, id);
		
		
		List list  = alertService.searchData(criteria);
		if(list != null && list.size()> 0){
			return (AlertService) list.get(0);
		}
		
		return null;
	}
	
	public static boolean insertEventRefId(long id, String eventRefId) {
		// TODO Auto-generated method stub
		AlertService alertService = new AlertService();
		SearchCriteria criteria = new SearchCriteria();
		
		criteria.addCritirea("id", SearchCriteria.EQUALS, id);
		
		
		List list  = alertService.searchData(criteria);
		if(list != null && list.size()> 0){
			alertService =  (AlertService) list.get(0);
			alertService.setEventRefId(eventRefId);
			alertService.updateData();
		}
		
		return false;
	}
	public static boolean updateAlert(Renderable message, AlertService alertService){
		
		alertService.setReceivedMsg(message.getSubBody());
		alertService.setReceivedOn(message.getReveivedOn() == null ? new Date():message.getReveivedOn());		
		alertService.setId(Long.valueOf(SecurityDBUtils.getDecreptedPassword(message.getReferenceId())));
		return alertService.updateData();
	}
	
	private static long insertUpdateAlert(long templateId, String mailId, String body,
			String subject, Date date) {
		// TODO Auto-generated method stub
		AlertService alertService = new AlertService();
		alertService.setUserId(mailId);
		alertService.setSendOn(date);
		if(templateId >0){
			alertService.setTemplateId(templateId);
		}else {
			return 0L;
		}
		alertService.insertOrUpdateData();
		
		return alertService.getId();
	}
	
	private static long getTemplateId(String dangerZoneName){
		
		List<MessageTemplate> regionDtls = DataModelsCache.getInstance().retrieve(MessageTemplate.class.getName());
		if(regionDtls != null){
			for (MessageTemplate mt:regionDtls){
				if(mt != null && mt.getName().equalsIgnoreCase(dangerZoneName)){
					return mt.getId();   
				}
			}
		}
		
		return -1;
	}
	
	
}
